// Generated by CoffeeScript 1.4.0
(function() {
  var $, BaseClass, Mark, MarkingSurface, Raphael, Tool, body, doc, win,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = window.jQuery;

  Raphael = window.Raphael;

  win = $(window);

  doc = $(document);

  body = $(document.body);

  BaseClass = (function() {
    var method, _fn, _i, _len, _ref,
      _this = this;

    BaseClass.prototype.jQueryInstance = null;

    function BaseClass(params) {
      var property, value;
      if (params == null) {
        params = {};
      }
      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        if (property in this) {
          this[property] = value;
        }
      }
      this.jQueryInstance = $(this);
    }

    BaseClass.prototype.destroy = function() {
      this.trigger('destroyed');
      return this.off();
    };

    _ref = ['on', 'one', 'trigger', 'off'];
    _fn = function(method) {
      return BaseClass.prototype[method] = function() {
        var _ref1;
        return (_ref1 = this.jQueryInstance)[method].apply(_ref1, arguments);
      };
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      method = _ref[_i];
      _fn(method);
    }

    return BaseClass;

  }).call(this);

  Mark = (function(_super) {

    __extends(Mark, _super);

    function Mark() {
      return Mark.__super__.constructor.apply(this, arguments);
    }

    Mark.prototype.set = function(property, value, _arg) {
      var fromMany, map, setter;
      fromMany = (_arg != null ? _arg : {}).fromMany;
      if (typeof property === 'string') {
        setter = this["set " + property];
        this[property] = setter ? setter.call(this, value) : value;
      } else {
        map = property;
        for (property in map) {
          value = map[property];
          this.set(property, value, {
            fromMany: true
          });
        }
      }
      if (!fromMany) {
        return this.trigger('change', property, value);
      }
    };

    Mark.prototype.toJSON = function() {
      var property, result, value;
      result = {
        type: this.type
      };
      for (property in this) {
        if (!__hasProp.call(this, property)) continue;
        value = this[property];
        if (property.slice(0, 'jQuery'.length) === 'jQuery') {
          continue;
        }
        result[property] = value;
      }
      return result;
    };

    return Mark;

  })(BaseClass);

  Tool = (function(_super) {

    __extends(Tool, _super);

    Tool.Mark = Mark;

    Tool.prototype.mark = null;

    Tool.prototype.markDefaults = null;

    Tool.prototype.surface = null;

    Tool.prototype.cursors = null;

    Tool.prototype.shapeSet = null;

    function Tool() {
      var _ref, _ref1,
        _this = this;
      Tool.__super__.constructor.apply(this, arguments);
      if ((_ref = this.shapeSet) == null) {
        this.shapeSet = this.surface.paper.set();
      }
      if ((_ref1 = this.mark) == null) {
        this.mark = new this.constructor.Mark;
      }
      if (this.markDefaults) {
        this.mark.set(this.markDefaults);
      }
      this.mark.on('change', $.proxy(this, 'render'));
      this.mark.on('destroyed', $.proxy(this, 'destroy'));
      this.deleteButton = $('<button name="delete-button">&times;</button>');
      this.deleteButton.on('click', $.proxy(this, 'onClickDelete'));
      this.deleteButton.appendTo(this.surface.container);
      setTimeout(function() {
        var eventName, _i, _len, _ref2, _results;
        _ref2 = ['mousedown', 'mouseover', 'mousemove', 'mouseout', 'mouseup'];
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          eventName = _ref2[_i];
          _results.push(_this.shapeSet[eventName]($.proxy(_this, 'handleEvents')));
        }
        return _results;
      });
    }

    Tool.prototype.addShape = function() {
      var attributes, params, shape, type, _ref;
      type = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (typeof params[params.length - 1] === 'object') {
        attributes = params.pop();
      }
      shape = (_ref = this.surface.paper)[type.toLowerCase()].apply(_ref, params);
      shape.attr(attributes);
      this.shapeSet.push(shape);
      return shape;
    };

    Tool.prototype.onClickDelete = function(e) {
      return this.mark.destroy();
    };

    Tool.prototype.onInitialClick = function(e) {
      var _this = this;
      this.trigger('initial-click', [e]);
      return doc.one('mouseup touchend', function(e) {
        return _this.trigger('initial-drag', [e]);
      });
    };

    Tool.prototype.onInitialDrag = function(e) {};

    Tool.prototype.handleEvents = function(e) {
      var name, onDrag, onNamedDrag, shape, target, type, _ref, _ref1,
        _this = this;
      if (this.surface.disabled) {
        return;
      }
      type = e.type;
      target = e.target || e.srcElement;
      for (name in this) {
        shape = this[name];
        if (!(__indexOf.call(this.shapeSet, shape) >= 0)) {
          continue;
        }
        if (shape.node === target) {
          break;
        }
        name = '';
        shape = null;
      }
      if ((_ref = this["on " + type]) != null) {
        _ref.call.apply(_ref, [this].concat(__slice.call(arguments)));
      }
      if (name) {
        if ((_ref1 = this["on " + type + " " + name]) != null) {
          _ref1.call.apply(_ref1, [this].concat(__slice.call(arguments)));
        }
      }
      if (type === 'mouseover') {
        setTimeout(function() {
          return body.css({
            cursor: _this.cursors[name]
          });
        });
      }
      if (type === 'mouseout') {
        body.css({
          cursor: ''
        });
      }
      if (type === 'mousedown' || type === 'touchstart') {
        this.select();
        e.preventDefault();
        if ('on drag' in this) {
          onDrag = $.proxy(this, 'on drag');
        }
        if (("on drag " + name) in this) {
          onNamedDrag = $.proxy(this, "on drag " + name);
        }
        if (onDrag != null) {
          doc.on('mousemove touchmove', onDrag);
          doc.one('mouseup touchend', function() {
            return doc.off('mousemove touchmove', onDrag);
          });
        }
        if (onNamedDrag != null) {
          doc.on('mousemove touchmove', onNamedDrag);
          return doc.one('mouseup touchend', function() {
            return doc.off('mousemove touchmove', onNamedDrag);
          });
        }
      }
    };

    Tool.prototype.render = function() {};

    Tool.prototype.select = function() {
      this.shapeSet.toFront();
      return this.trigger('selected', arguments);
    };

    Tool.prototype.deselect = function() {
      return this.trigger('deselected', arguments);
    };

    Tool.prototype.destroy = function() {
      var _this = this;
      return this.shapeSet.animate({
        transform: '...s0.01'
      }, 250, 'ease-out', function() {
        _this.shapeSet.remove();
        _this.deleteButton.remove();
        return Tool.__super__.destroy.apply(_this, arguments);
      });
    };

    Tool.prototype.isComplete = function() {
      return true;
    };

    return Tool;

  })(BaseClass);

  MarkingSurface = (function(_super) {

    __extends(MarkingSurface, _super);

    MarkingSurface.prototype.tool = Tool;

    MarkingSurface.prototype.container = null;

    MarkingSurface.prototype.className = 'marking-surface';

    MarkingSurface.prototype.width = 480;

    MarkingSurface.prototype.height = 320;

    MarkingSurface.prototype.background = '';

    MarkingSurface.prototype.paper = null;

    MarkingSurface.prototype.image = null;

    MarkingSurface.prototype.marks = null;

    MarkingSurface.prototype.tools = null;

    MarkingSurface.prototype.selection = null;

    MarkingSurface.prototype.disabled = false;

    function MarkingSurface(params) {
      var _ref, _ref1, _ref2, _ref3;
      if (params == null) {
        params = {};
      }
      MarkingSurface.__super__.constructor.apply(this, arguments);
      if ((_ref = this.container) == null) {
        this.container = document.createElement('div');
      }
      this.container = $(this.container);
      this.container.addClass(this.className);
      this.container.attr({
        tabindex: 0
      });
      this.container.on('blur', $.proxy(this, 'onBlur'));
      if (this.container.parents().length !== 0) {
        if (!('width' in params)) {
          this.width = this.container.width() || this.width;
        }
        if (!('height' in params)) {
          this.height = this.container.height() || this.height;
        }
      }
      if ((_ref1 = this.paper) == null) {
        this.paper = Raphael(this.container.get(0), this.width, this.height);
      }
      this.image = this.paper.image(this.background, 0, 0, this.width, this.height);
      win.on('resize', $.proxy(this, 'resize'));
      setTimeout($.proxy(this, 'resize'));
      if ((_ref2 = this.marks) == null) {
        this.marks = [];
      }
      if ((_ref3 = this.tools) == null) {
        this.tools = [];
      }
      if (this.disabled) {
        disable();
      }
      this.container.on('mousedown touchstart', $.proxy(this, 'onMouseDown'));
      this.container.on('keydown', $.proxy(this, 'onKeyDown'));
    }

    MarkingSurface.prototype.resize = function() {
      this.width = this.container.width();
      this.height = this.container.height();
      this.paper.setSize(this.width, this.height);
      return this.image.attr({
        width: this.width,
        height: this.height
      });
    };

    MarkingSurface.prototype.onMouseDown = function(e) {
      var mark, tool, _ref,
        _this = this;
      if (this.disabled) {
        return;
      }
      this.container.focus();
      if ((_ref = e.target) !== this.container.get(0) && _ref !== this.paper.canvas && _ref !== this.image.node) {
        return;
      }
      if (e.isDefaultPrevented()) {
        return;
      }
      e.preventDefault();
      if (!(this.selection != null) || this.selection.isComplete()) {
        tool = new this.tool({
          surface: this
        });
        mark = tool.mark;
        this.tools.push(tool);
        this.marks.push(mark);
        tool.on('selected', function() {
          var i, index, t, _i, _len, _ref1, _ref2;
          if ((_ref1 = _this.selection) != null) {
            _ref1.deselect();
          }
          _ref2 = _this.tools;
          for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
            t = _ref2[i];
            if (t === tool) {
              index = i;
            }
          }
          _this.tools.splice(index, 1);
          _this.tools.push(tool);
          return _this.selection = tool;
        });
        tool.on('deselected', function() {
          return _this.selection = null;
        });
        tool.on('destroyed', function() {
          var i, index, t, _i, _len, _ref1, _ref2;
          _ref1 = _this.tools;
          for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
            t = _ref1[i];
            if (t === tool) {
              index = i;
            }
          }
          _this.tools.splice(index, 1);
          if (tool === _this.selection) {
            return (_ref2 = _this.tools[_this.tools.length - 1]) != null ? _ref2.select() : void 0;
          }
        });
        mark.on('destroyed', function() {
          var i, index, m, _i, _len, _ref1;
          _ref1 = _this.marks;
          for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
            m = _ref1[i];
            if (m === mark) {
              index = i;
            }
          }
          return _this.marks.splice(index, 1);
        });
        tool.select();
      } else {
        tool = this.selection;
      }
      tool.onInitialClick(e);
      doc.on('mousemove touchmove', $.proxy(this, 'onDrag'));
      return doc.one('mouseup touchend', function() {
        return doc.off('mousemove touchmove', $.proxy(_this, 'onDrag'));
      });
    };

    MarkingSurface.prototype.onDrag = function(e) {
      return this.selection.onInitialDrag(e);
    };

    MarkingSurface.prototype.onKeyDown = function(e) {
      var _ref, _ref1;
      if ((_ref = e.which) === 8 || _ref === 46) {
        e.preventDefault();
        return (_ref1 = this.selection) != null ? _ref1.mark.destroy() : void 0;
      }
    };

    MarkingSurface.prototype.onBlur = function() {
      var _ref;
      return (_ref = this.selection) != null ? _ref.deselect() : void 0;
    };

    MarkingSurface.prototype.disable = function(e) {
      var _ref;
      this.disabled = true;
      this.container.attr({
        disabled: true
      });
      this.container.addClass('disabled');
      return (_ref = this.selection) != null ? _ref.deselect() : void 0;
    };

    MarkingSurface.prototype.enable = function(e) {
      this.disabled = false;
      this.container.attr({
        disabled: false
      });
      return this.container.removeClass('disabled');
    };

    MarkingSurface.prototype.destroy = function() {
      var mark, _i, _len, _ref;
      _ref = this.marks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mark = _ref[_i];
        mark.destroy();
      }
      return MarkingSurface.__super__.destroy.apply(this, arguments);
    };

    MarkingSurface.prototype.mouseOffset = function(e) {
      var left, originalEvent, top, _ref;
      if ('originalEvent' in e) {
        originalEvent = e.originalEvent;
      }
      if ((originalEvent != null) && 'touches' in originalEvent) {
        e = originalEvent.touches[0];
      }
      _ref = this.container.offset(), left = _ref.left, top = _ref.top;
      return {
        x: e.pageX - left,
        y: e.pageY - top
      };
    };

    return MarkingSurface;

  })(BaseClass);

  MarkingSurface.Mark = Mark;

  MarkingSurface.Tool = Tool;

  window.MarkingSurface = MarkingSurface;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = MarkingSurface;
  }

}).call(this);
