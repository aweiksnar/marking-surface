// Generated by CoffeeScript 1.6.3
(function() {
  var BaseClass, CASED_ATTRIBUTES, Mark, MarkingSurface, SVG, SVG_NS, Tool, ToolControls, events, _ref,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BaseClass = (function() {
    BaseClass.prototype._events = null;

    function BaseClass(params) {
      var property, value;
      if (params == null) {
        params = {};
      }
      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        if (property in this) {
          this[property] = value;
        }
      }
      this._events = {};
    }

    BaseClass.prototype.on = function(eventName, handler) {
      var _base;
      if ((_base = this._events)[eventName] == null) {
        _base[eventName] = [];
      }
      this._events[eventName].push(handler);
      return null;
    };

    BaseClass.prototype.trigger = function(eventName, args) {
      var handler, _i, _len, _ref;
      _ref = this._events[eventName] || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        handler.apply(this, args || []);
      }
      return null;
    };

    BaseClass.prototype.off = function(eventName, handler) {
      var h, i, property, _i, _len, _ref;
      if ((eventName != null) && (handler != null)) {
        _ref = this._events[eventName];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          h = _ref[i];
          if (!(h === handler)) {
            continue;
          }
          (this._events[eventName] || []).splice(i, 1);
          return;
        }
      } else if (eventName != null) {
        (this._events[eventName] || []).splice(0);
      } else {
        for (property in this._events) {
          delete this._events[property];
        }
      }
      return null;
    };

    BaseClass.prototype.destroy = function() {
      this.trigger('destroy');
      this.off();
      return null;
    };

    return BaseClass;

  })();

  SVG_NS = 'http://www.w3.org/2000/svg';

  CASED_ATTRIBUTES = ['viewBox'];

  SVG = (function() {
    SVG.prototype.el = null;

    function SVG(tagName, attributes) {
      var classes, _ref, _ref1;
      if (typeof tagName !== 'string') {
        _ref = ['svg', tagName], tagName = _ref[0], attributes = _ref[1];
      }
      _ref1 = tagName.split('.'), tagName = _ref1[0], classes = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
      this.el = document.createElementNS(SVG_NS, tagName);
      this.attr('class', classes.join(' '));
      this.attr(attributes);
    }

    SVG.prototype.attr = function(attribute, value) {
      var attributes;
      if (typeof attribute === 'string') {
        if (__indexOf.call(CASED_ATTRIBUTES, attribute) < 0) {
          attribute = (attribute.replace(/([A-Z])/g, '-$1')).toLowerCase();
        }
        this.el.setAttributeNS(null, attribute, value);
      } else {
        attributes = attribute;
        for (attribute in attributes) {
          value = attributes[attribute];
          this.attr(attribute, value);
        }
      }
      return null;
    };

    SVG.prototype.addShape = function(tagName, attributes) {
      var shape;
      shape = new this.constructor(tagName, attributes);
      this.el.appendChild(shape.el);
      return shape;
    };

    SVG.prototype.toFront = function() {
      this.el.parentNode.appendChild(this.el);
      return null;
    };

    SVG.prototype.remove = function() {
      this.el.parentNode.removeChild(this.el);
      return null;
    };

    return SVG;

  })();

  Mark = (function(_super) {
    __extends(Mark, _super);

    function Mark() {
      _ref = Mark.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Mark.prototype.set = function(property, value, _arg) {
      var fromMany, map, setter;
      fromMany = (_arg != null ? _arg : {}).fromMany;
      if (typeof property === 'string') {
        setter = this["set " + property];
        this[property] = setter != null ? setter.call(this, value) : value;
      } else {
        map = property;
        for (property in map) {
          value = map[property];
          this.set(property, value, {
            fromMany: true
          });
        }
      }
      if (!fromMany) {
        this.trigger('change', [property, value]);
      }
      return null;
    };

    Mark.prototype.get = function() {
      var getter, properties, property, values;
      properties = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      values = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          property = properties[_i];
          getter = this["get " + property];
          if (getter != null) {
            _results.push(getter.call(this));
          } else {
            _results.push(this[property]);
          }
        }
        return _results;
      }).call(this);
      if (properties.length === 1) {
        return values[0];
      } else {
        return values;
      }
    };

    Mark.prototype.toJSON = function() {
      var gottenValue, property, result, value;
      result = {};
      for (property in this) {
        if (!__hasProp.call(this, property)) continue;
        value = this[property];
        if ((property.charAt(0)) === '_') {
          continue;
        }
        if (typeof value === 'function') {
          continue;
        }
        gottenValue = this.get(property);
        result[property] = gottenValue;
      }
      return result;
    };

    return Mark;

  })(BaseClass);

  ToolControls = (function(_super) {
    __extends(ToolControls, _super);

    ToolControls.prototype.tool = null;

    ToolControls.prototype.el = null;

    ToolControls.prototype.className = 'marking-tool-controls';

    ToolControls.prototype.label = null;

    ToolControls.prototype.deleteButton = null;

    ToolControls.prototype.template = '<span class="tool-label"></span>\n<button name="delete-mark">&times;</button>';

    function ToolControls() {
      this.render = __bind(this.render, this);
      this.onToolDestroy = __bind(this.onToolDestroy, this);
      this.onToolDeselect = __bind(this.onToolDeselect, this);
      this.onToolSelect = __bind(this.onToolSelect, this);
      this.onClickDelete = __bind(this.onClickDelete, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      var _this = this;
      ToolControls.__super__.constructor.apply(this, arguments);
      this.el = document.createElement('div');
      this.el.className = this.className;
      this.el.innerHTML = (typeof this.template === "function" ? this.template(this) : void 0) || this.template;
      this.label = this.el.querySelector('.tool-label');
      this.deleteButton = this.el.querySelector('button[name="delete-mark"]');
      this.el.addEventListener('mousedown', this.onMouseDown, false);
      if (this.deleteButton != null) {
        this.deleteButton.addEventListener('click', this.onClickDelete, false);
      }
      this.tool.on('select', this.onToolSelect);
      this.tool.on('initial-release', function() {
        if (_this.tool.isComplete()) {
          return _this.el.setAttribute('complete', 'complete');
        }
      });
      this.tool.mark.on('change', this.render);
      this.tool.on('deselect', this.onToolDeselect);
      this.tool.on('destroy', this.onToolDestroy);
    }

    ToolControls.prototype.moveTo = function(x, y) {
      var bottom, height, hidden, left, panX, panY, right, top, width, zoomBy, _ref1, _ref2, _ref3;
      _ref1 = this.tool.surface, zoomBy = _ref1.zoomBy, panX = _ref1.panX, panY = _ref1.panY, width = _ref1.width, height = _ref1.height;
      this.el.style.position = 'absolute';
      panX *= width - (width / zoomBy);
      panY *= height - (height / zoomBy);
      _ref2 = x < width / 2 ? [(x * zoomBy) - (panX * zoomBy), null] : [null, width - ((x * zoomBy) - (panX * zoomBy))], left = _ref2[0], right = _ref2[1];
      _ref3 = y < height / 2 ? [(y * zoomBy) - (panY * zoomBy), null] : [null, height - ((y * zoomBy) - (panY * zoomBy))], top = _ref3[0], bottom = _ref3[1];
      hidden = left < 0 || right < 0 || top < 0 || bottom < 0;
      hidden || (hidden = left > width || right > width || top > height || bottom > height);
      this.el.style.left = left != null ? "" + left + "px" : '';
      this.el.style.right = right != null ? "" + right + "px" : '';
      this.el.style.top = top != null ? "" + top + "px" : '';
      this.el.style.bottom = bottom != null ? "" + bottom + "px" : '';
      this.el.style.display = hidden ? 'none' : '';
      this.el.setAttribute('horizontal-direction', left != null ? 'right' : 'left');
      this.el.setAttribute('vertical-direction', top != null ? 'down' : 'up');
      return null;
    };

    ToolControls.prototype.onMouseDown = function() {
      if (this.tool.surface.disabled) {
        return;
      }
      this.tool.select();
      return null;
    };

    ToolControls.prototype.onClickDelete = function(e) {
      if (this.tool.surface.disabled) {
        return;
      }
      e.preventDefault();
      this.tool.mark.destroy();
      return null;
    };

    ToolControls.prototype.onToolSelect = function() {
      this.el.setAttribute('selected', 'selected');
      return null;
    };

    ToolControls.prototype.onToolDeselect = function() {
      this.el.removeAttribute('selected');
      return null;
    };

    ToolControls.prototype.onToolDestroy = function() {
      this.destroy();
      return null;
    };

    ToolControls.prototype.destroy = function() {
      ToolControls.__super__.destroy.apply(this, arguments);
      this.el.removeEventListener('mousedown', this.onMouseDown, false);
      this.deleteButton.removeEventListener('click', this.onClickDelete, false);
      this.el.parentNode.removeChild(this.el);
      return null;
    };

    ToolControls.prototype.render = function() {
      var _ref1;
      if ('_label' in this.tool.mark) {
        if ((_ref1 = this.label) != null) {
          _ref1.innerHTML = this.tool.mark._label;
        }
      }
      return null;
    };

    return ToolControls;

  })(BaseClass);

  events = ['mousedown', 'mouseover', 'mousmove', 'mouseout', 'mouseup', 'touchstart', 'touchmove', 'touchend'];

  Tool = (function(_super) {
    __extends(Tool, _super);

    Tool.Mark = Mark;

    Tool.Controls = ToolControls;

    Tool.prototype.markDefaults = null;

    Tool.prototype.cursors = null;

    Tool.prototype.mark = null;

    Tool.prototype.controls = null;

    Tool.prototype.group = null;

    Tool.prototype.surface = null;

    Tool.prototype.drags = 0;

    function Tool() {
      this.destroy = __bind(this.destroy, this);
      this.onMarkDestory = __bind(this.onMarkDestory, this);
      this.onMarkChange = __bind(this.onMarkChange, this);
      this.handleEvents = __bind(this.handleEvents, this);
      var eventName, _i, _len;
      Tool.__super__.constructor.apply(this, arguments);
      if (this.mark == null) {
        this.mark = new this.constructor.Mark;
      }
      this.mark.on('change', this.onMarkChange);
      this.mark.on('destroy', this.onMarkDestory);
      this.controls = new this.constructor.Controls({
        tool: this
      });
      this.surface.container.appendChild(this.controls.el);
      this.group = this.surface.svg.addShape('g.tool');
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        eventName = events[_i];
        this.group.el.addEventListener(eventName, this.handleEvents, false);
      }
      this.initialize.apply(this, arguments);
      if (this.markDefaults != null) {
        this.mark.set(this.markDefaults);
      }
    }

    Tool.prototype.addShape = function() {
      var _ref1;
      return (_ref1 = this.group).addShape.apply(_ref1, arguments);
    };

    Tool.prototype.onInitialClick = function(e) {
      this.trigger('initial-click', [e]);
      return this.onFirstClick(e);
    };

    Tool.prototype.onInitialDrag = function(e) {
      this.trigger('initial-drag', [e]);
      return this.onFirstDrag(e);
    };

    Tool.prototype.onInitialRelease = function(e) {
      this.drags += 1;
      this.trigger('initial-release', [e]);
      return this.onFirstRelease(e);
    };

    Tool.prototype.handleEvents = function(e) {
      var dragEvent, endEvent, eventName, match, name, onEnd, onNamedEnd, property, target, value, valueItem, _i, _len, _ref1, _ref2, _ref3,
        _this = this;
      if (this.surface.disabled) {
        return;
      }
      eventName = e.type;
      ({
        name: '*'
      });
      target = e.target || e.srcElement;
      for (property in this) {
        value = this[property];
        match = (value != null ? value.el : void 0) === target;
        if (value instanceof Array) {
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            valueItem = value[_i];
            match || (match = (valueItem != null ? valueItem.el : void 0) === target);
          }
        }
        if (match) {
          name = property;
          target = value;
        }
      }
      if ((_ref1 = this["on " + eventName]) != null) {
        _ref1.call(this, e);
      }
      if ((_ref2 = this["on " + eventName + " " + name]) != null) {
        _ref2.call(this, e);
      }
      switch (eventName) {
        case 'mouseover':
          return this.surface.container.style.cursor = (_ref3 = this.cursors) != null ? _ref3[name] : void 0;
        case 'mouseout':
          return this.surface.container.style.cursor = '';
        case 'mousedown':
        case 'touchstart':
          e.preventDefault();
          this.select();
          dragEvent = eventName === 'mousedown' ? 'mousemove' : 'touchmove';
          endEvent = eventName === 'mousedown' ? 'mouseup' : 'touchend';
          if ('on drag' in this) {
            this["on drag"](e);
            document.addEventListener(dragEvent, this['on drag'], false);
            onEnd = function() {
              document.removeEventListener(dragEvent, _this['on drag'], false);
              return document.removeEventListener(endEvent, onEnd, false);
            };
            document.addEventListener(endEvent, onEnd, false);
          }
          if (("on drag " + name) in this) {
            this["on drag " + name](e);
            document.addEventListener(dragEvent, this["on drag " + name], false);
            onNamedEnd = function() {
              document.removeEventListener(dragEvent, _this["on drag " + name], false);
              return document.removeEventListener(endEvent, onNamedEnd, false);
            };
            return document.addEventListener(endEvent, onNamedEnd, false);
          }
      }
    };

    Tool.prototype.onMarkChange = function() {
      this.render.apply(this, arguments);
      return null;
    };

    Tool.prototype.onMarkDestory = function() {
      this.destroy.apply(this, arguments);
      return null;
    };

    Tool.prototype.select = function() {
      this.group.attr({
        opacity: 1
      });
      this.group.toFront();
      this.trigger('select', arguments);
      return null;
    };

    Tool.prototype.deselect = function() {
      this.group.attr({
        opacity: 0.5
      });
      this.trigger('deselect', arguments);
      return null;
    };

    Tool.prototype.destroy = function() {
      var eventName, _i, _len;
      Tool.__super__.destroy.apply(this, arguments);
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        eventName = events[_i];
        this.group.el.removeEventListener(eventName, this.handleEvents, false);
      }
      this.group.remove();
      this.trigger('destroy', arguments);
      return null;
    };

    Tool.prototype.pointerOffset = function() {
      var _ref1;
      return (_ref1 = this.surface).pointerOffset.apply(_ref1, arguments);
    };

    Tool.prototype.initialize = function() {};

    Tool.prototype.onFirstClick = function(e) {};

    Tool.prototype.onFirstDrag = function(e) {};

    Tool.prototype.isComplete = function() {
      return this.drags === 1;
    };

    Tool.prototype.onFirstRelease = function(e) {};

    Tool.prototype.render = function() {};

    return Tool;

  })(BaseClass);

  MarkingSurface = (function(_super) {
    __extends(MarkingSurface, _super);

    MarkingSurface.prototype.tool = Tool;

    MarkingSurface.prototype.container = null;

    MarkingSurface.prototype.className = 'marking-surface';

    MarkingSurface.prototype.tabIndex = 0;

    MarkingSurface.prototype.svg = null;

    MarkingSurface.prototype.width = NaN;

    MarkingSurface.prototype.height = NaN;

    MarkingSurface.prototype.zoomBy = 1;

    MarkingSurface.prototype.zoomSnapTolerance = 0.05;

    MarkingSurface.prototype.panX = 0.5;

    MarkingSurface.prototype.panY = 0.5;

    MarkingSurface.prototype.tools = null;

    MarkingSurface.prototype.selection = null;

    MarkingSurface.prototype.marks = null;

    MarkingSurface.prototype.disabled = false;

    function MarkingSurface(params) {
      if (params == null) {
        params = {};
      }
      this.onRelease = __bind(this.onRelease, this);
      this.onDrag = __bind(this.onDrag, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.onTouchMove = __bind(this.onTouchMove, this);
      this.onTouchStart = __bind(this.onTouchStart, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      MarkingSurface.__super__.constructor.apply(this, arguments);
      if (this.container == null) {
        this.container = document.createElement('div');
      }
      this.container.className = this.className;
      this.container.setAttribute('tabindex', this.tabIndex);
      this.container.setAttribute('unselectable', true);
      this.container.addEventListener('mousedown', this.onMouseDown, false);
      this.container.addEventListener('mousemove', this.onMouseMove, false);
      this.container.addEventListener('touchstart', this.onTouchStart, false);
      this.container.addEventListener('touchmove', this.onTouchMove, false);
      if (this.container.parentNode != null) {
        this.width || (this.width = this.container.clientWidth);
        this.height || (this.height = this.container.clientHeight);
      }
      if (this.svg == null) {
        this.svg = new SVG({
          width: this.width,
          height: this.height
        });
      }
      this.svg.el.style.display = 'block';
      this.container.appendChild(this.svg.el);
      if (this.marks == null) {
        this.marks = [];
      }
      if (this.tools == null) {
        this.tools = [];
      }
      if (this.disabled) {
        disable();
      }
    }

    MarkingSurface.prototype.resize = function(width, height) {
      this.width = width != null ? width : this.width;
      this.height = height != null ? height : this.height;
      this.svg.attr({
        width: this.width,
        height: this.height
      });
      return null;
    };

    MarkingSurface.prototype.zoom = function(zoomBy) {
      this.zoomBy = zoomBy != null ? zoomBy : 1;
      if (this.zoomBy < 1 + this.zoomSnapTolerance) {
        this.zoomBy = 1;
        this.panX = this.constructor.prototype.panX;
        this.panY = this.constructor.prototype.panY;
      }
      this.pan();
      return null;
    };

    MarkingSurface.prototype.pan = function(panX, panY) {
      var height, minX, minY, tool, width, _i, _len, _ref1;
      this.panX = panX != null ? panX : this.panX;
      this.panY = panY != null ? panY : this.panY;
      minX = (this.width - (this.width / this.zoomBy)) * this.panX;
      minY = (this.height - (this.height / this.zoomBy)) * this.panY;
      width = this.width / this.zoomBy;
      height = this.height / this.zoomBy;
      this.svg.attr('viewBox', "" + minX + " " + minY + " " + width + " " + height);
      _ref1 = this.tools;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tool = _ref1[_i];
        tool.render();
      }
      return null;
    };

    MarkingSurface.prototype.onMouseMove = function(e) {
      var x, y, _ref1;
      if (this.zoomBy === 1) {
        return;
      }
      _ref1 = this.pointerOffset(e), x = _ref1.x, y = _ref1.y;
      this.pan(x / this.width, y / this.height);
      return null;
    };

    MarkingSurface.prototype.onTouchStart = function(e) {
      if (e.touches.length === 1) {
        this.onMouseDown(e);
      }
      return null;
    };

    MarkingSurface.prototype.onTouchMove = function(e) {
      this.onMouseMove(e);
      return null;
    };

    MarkingSurface.prototype.onMouseDown = function(e) {
      var dragEvent, mark, releaseEvent, tool, _ref1,
        _this = this;
      if (this.disabled) {
        return;
      }
      if (e.defaultPrevented) {
        return;
      }
      if (_ref1 = e.target, __indexOf.call(this.container.querySelectorAll("." + ToolControls.prototype.className + ", ." + ToolControls.prototype.className + " *"), _ref1) >= 0) {
        return;
      }
      e.preventDefault();
      if ((this.selection == null) || this.selection.isComplete()) {
        if (this.tool != null) {
          tool = new this.tool({
            surface: this
          });
          mark = tool.mark;
          this.tools.push(tool);
          this.marks.push(mark);
          tool.on('select', function() {
            var i, index, t, _i, _len, _ref2, _ref3;
            if (_this.selection === tool) {
              return;
            }
            if ((_ref2 = _this.selection) != null) {
              _ref2.deselect();
            }
            _ref3 = _this.tools;
            for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
              t = _ref3[i];
              if (t === tool) {
                index = i;
              }
            }
            _this.tools.splice(index, 1);
            _this.tools.push(tool);
            return _this.selection = tool;
          });
          tool.on('deselect', function() {
            return _this.selection = null;
          });
          tool.on('destroy', function() {
            var i, index, t, _i, _len, _ref2, _ref3;
            _ref2 = _this.tools;
            for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
              t = _ref2[i];
              if (t === tool) {
                index = i;
              }
            }
            _this.tools.splice(index, 1);
            if (tool === _this.selection) {
              return (_ref3 = _this.tools[_this.tools.length - 1]) != null ? _ref3.select() : void 0;
            }
          });
          mark.on('destroy', function() {
            var i, index, m, _i, _len, _ref2;
            _ref2 = _this.marks;
            for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
              m = _ref2[i];
              if (m === mark) {
                index = i;
              }
            }
            _this.marks.splice(index, 1);
            return _this.trigger('destroy-mark', [mark]);
          });
          tool.select();
          this.trigger('create-mark', [mark, tool]);
        }
      } else {
        tool = this.selection;
      }
      if (tool != null) {
        tool.select();
        tool.onInitialClick(e);
      }
      dragEvent = e.type === 'mousedown' ? 'mousemove' : 'touchmove';
      releaseEvent = e.type === 'mousedown' ? 'mouseup' : 'touchend';
      document.addEventListener(dragEvent, this.onDrag, false);
      document.addEventListener(releaseEvent, this.onRelease, false);
      return null;
    };

    MarkingSurface.prototype.onDrag = function(e) {
      var _ref1;
      e.preventDefault();
      if ((_ref1 = this.selection) != null) {
        _ref1.onInitialDrag.apply(_ref1, arguments);
      }
      return null;
    };

    MarkingSurface.prototype.onRelease = function(e) {
      var dragEvent, _ref1;
      e.preventDefault();
      dragEvent = e.type === 'mouseup' ? 'mousemove' : 'touchmove';
      document.removeEventListener(dragEvent, this.onDrag, false);
      document.removeEventListener(e.type, this.onRelease, false);
      if ((_ref1 = this.selection) != null) {
        _ref1.onInitialRelease.apply(_ref1, arguments);
      }
      return null;
    };

    MarkingSurface.prototype.disable = function(e) {
      var _ref1;
      if (this.disabled) {
        return;
      }
      this.disabled = true;
      this.container.setAttribute('disabled', 'disabled');
      if ((_ref1 = this.selection) != null) {
        _ref1.deselect();
      }
      return null;
    };

    MarkingSurface.prototype.enable = function(e) {
      if (!this.disabled) {
        return;
      }
      this.disabled = false;
      this.container.removeAttribute('disabled');
      return null;
    };

    MarkingSurface.prototype.destroy = function() {
      var mark, _i, _len, _ref1;
      _ref1 = this.marks;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        mark = _ref1[_i];
        mark.destroy();
      }
      this.container.removeEventListener('mousedown', this.onMouseDown, false);
      this.container.removeEventListener('mousemove', this.onMouseMove, false);
      this.container.removeEventListener('touchstart', this.onTouchStart, false);
      this.container.removeEventListener('touchmove', this.onTouchMove, false);
      return null;
    };

    MarkingSurface.prototype.pointerOffset = function(e) {
      var currentElement, element, elements, left, originalEvent, top, x, y, _i, _len;
      if ('originalEvent' in e) {
        originalEvent = e.originalEvent;
      }
      if ((originalEvent != null) && 'touches' in originalEvent) {
        e = originalEvent.touches[0];
      }
      elements = [];
      currentElement = this.container;
      while (currentElement != null) {
        elements.push(currentElement);
        currentElement = currentElement.parentNode;
      }
      left = 0;
      top = 0;
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        if (!isNaN(element.offsetLeft)) {
          left += element.offsetLeft;
        }
        if (!isNaN(element.offsetTop)) {
          top += element.offsetTop;
        }
      }
      x = e.pageX - left;
      y = e.pageY - top;
      return {
        x: x,
        y: y
      };
    };

    return MarkingSurface;

  })(BaseClass);

  MarkingSurface.Mark = Mark;

  MarkingSurface.ToolControls = ToolControls;

  MarkingSurface.Tool = Tool;

  if (typeof window !== "undefined" && window !== null) {
    window.MarkingSurface = MarkingSurface;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = MarkingSurface;
  }

}).call(this);
