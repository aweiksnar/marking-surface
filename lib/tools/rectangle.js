// Generated by CoffeeScript 1.6.3
(function() {
  var RectangleTool, Tool, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tool = ((typeof window !== "undefined" && window !== null ? window.MarkingSurface : void 0) || require('marking-surface')).Tool;

  RectangleTool = (function(_super) {
    var creationCoords;

    __extends(RectangleTool, _super);

    function RectangleTool() {
      this['on touchend'] = __bind(this['on touchend'], this);
      this['on mouseup'] = __bind(this['on mouseup'], this);
      this['on drag outside'] = __bind(this['on drag outside'], this);
      this['on drag bottomLeftHandle'] = __bind(this['on drag bottomLeftHandle'], this);
      this['on drag bottomRightHandle'] = __bind(this['on drag bottomRightHandle'], this);
      this['on drag topRightHandle'] = __bind(this['on drag topRightHandle'], this);
      this['on drag topLeftHandle'] = __bind(this['on drag topLeftHandle'], this);
      _ref = RectangleTool.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RectangleTool.prototype.outside = null;

    RectangleTool.prototype.topLeftHandle = null;

    RectangleTool.prototype.topRightHandle = null;

    RectangleTool.prototype.bottomRightHandle = null;

    RectangleTool.prototype.bottomLeftHandle = null;

    RectangleTool.prototype.handleSize = !!~navigator.userAgent.indexOf('iO') ? 20 : 10;

    RectangleTool.prototype.fill = 'rgba(128, 128, 128, 0.1)';

    RectangleTool.prototype.stroke = 'white';

    RectangleTool.prototype.strokeWidth = 2;

    RectangleTool.prototype.defaultSize = 10;

    creationCoords = null;

    RectangleTool.prototype.dragOffsetFromCenter = null;

    RectangleTool.prototype.cursors = {
      outside: 'move'
    };

    RectangleTool.prototype.initialize = function() {
      this.root.filter('shadow');
      this.outside = this.addShape('rect', {
        fill: this.fill,
        stroke: this.stroke,
        strokeWidth: this.strokeWidth
      });
      this.topLeftHandle = this.addShape('rect', {
        width: this.handleSize,
        height: this.handleSize,
        fill: this.fill,
        stroke: this.stroke,
        strokeWidth: this.strokeWidth
      });
      this.topRightHandle = this.addShape('rect', {
        width: this.handleSize,
        height: this.handleSize,
        fill: this.fill,
        stroke: this.stroke,
        strokeWidth: this.strokeWidth
      });
      this.bottomRightHandle = this.addShape('rect', {
        width: this.handleSize,
        height: this.handleSize,
        fill: this.fill,
        stroke: this.stroke,
        strokeWidth: this.strokeWidth
      });
      this.bottomLeftHandle = this.addShape('rect', {
        width: this.handleSize,
        height: this.handleSize,
        fill: this.fill,
        stroke: this.stroke,
        strokeWidth: this.strokeWidth
      });
      return this.mark.set({
        left: 0,
        top: 0,
        width: this.defaultSize,
        height: this.defaultSize
      });
    };

    RectangleTool.prototype['on mousedown'] = function(e) {
      var x, y, _ref1;
      _ref1 = this.pointerOffset(e), x = _ref1.x, y = _ref1.y;
      return this.dragOffsetFromCenter = {
        x: x - this.mark.left,
        y: y - this.mark.top
      };
    };

    RectangleTool.prototype['on touchstart'] = function(e) {
      return this['on mousedown'](e);
    };

    RectangleTool.prototype.onFirstClick = function(e) {
      this.creationCoords = this.pointerOffset(e);
      this.mark.set({
        left: this.creationCoords.x,
        top: this.creationCoords.y
      });
      return this.onFirstDrag(e);
    };

    RectangleTool.prototype.onFirstDrag = function(e) {
      var dragMethod, x, y, _ref1;
      _ref1 = this.pointerOffset(e), x = _ref1.x, y = _ref1.y;
      dragMethod = x < this.creationCoords.x && y < this.creationCoords.y ? 'on drag topLeftHandle' : x >= this.creationCoords.x && y < this.creationCoords.y ? 'on drag topRightHandle' : x >= this.creationCoords.x && y >= this.creationCoords.y ? 'on drag bottomRightHandle' : x < this.creationCoords.x && y >= this.creationCoords.y ? 'on drag bottomLeftHandle' : void 0;
      return this[dragMethod](e);
    };

    RectangleTool.prototype['on drag topLeftHandle'] = function(e) {
      var x, y, _ref1;
      _ref1 = this.pointerOffset(e), x = _ref1.x, y = _ref1.y;
      x -= this.handleSize / 2;
      y -= this.handleSize / 2;
      return this.mark.set({
        left: x,
        top: y,
        width: this.mark.width + (this.mark.left - x),
        height: this.mark.height + (this.mark.top - y)
      });
    };

    RectangleTool.prototype['on drag topRightHandle'] = function(e) {
      var x, y, _ref1;
      _ref1 = this.pointerOffset(e), x = _ref1.x, y = _ref1.y;
      x += this.handleSize / 2;
      y -= this.handleSize / 2;
      return this.mark.set({
        top: y,
        width: x - this.mark.left,
        height: this.mark.height + (this.mark.top - y)
      });
    };

    RectangleTool.prototype['on drag bottomRightHandle'] = function(e) {
      var x, y, _ref1;
      _ref1 = this.pointerOffset(e), x = _ref1.x, y = _ref1.y;
      x += this.handleSize / 2;
      y += this.handleSize / 2;
      return this.mark.set({
        width: x - this.mark.left,
        height: y - this.mark.top
      });
    };

    RectangleTool.prototype['on drag bottomLeftHandle'] = function(e) {
      var x, y, _ref1;
      _ref1 = this.pointerOffset(e), x = _ref1.x, y = _ref1.y;
      x -= this.handleSize / 2;
      y += this.handleSize / 2;
      return this.mark.set({
        left: x,
        width: this.mark.width + (this.mark.left - x),
        height: y - this.mark.top
      });
    };

    RectangleTool.prototype['on drag outside'] = function(e) {
      var x, y, _ref1;
      _ref1 = this.pointerOffset(e), x = _ref1.x, y = _ref1.y;
      return this.mark.set({
        left: x - this.dragOffsetFromCenter.x,
        top: y - this.dragOffsetFromCenter.y
      });
    };

    RectangleTool.prototype['on mouseup'] = function() {
      return this.dragOffsetFromCenter = null;
    };

    RectangleTool.prototype['on touchend'] = function(e) {
      return this['on mouseup'](e);
    };

    RectangleTool.prototype.render = function() {
      this.outside.attr({
        x: this.mark.left,
        y: this.mark.top,
        width: this.mark.width,
        height: this.mark.height
      });
      this.topLeftHandle.attr({
        x: this.mark.left,
        y: this.mark.top
      });
      this.topRightHandle.attr({
        x: this.mark.left + (this.mark.width - this.handleSize),
        y: this.mark.top
      });
      this.bottomRightHandle.attr({
        x: this.mark.left + (this.mark.width - this.handleSize),
        y: this.mark.top + (this.mark.height - this.handleSize)
      });
      this.bottomLeftHandle.attr({
        x: this.mark.left,
        y: this.mark.top + (this.mark.height - this.handleSize)
      });
      return this.positionControls();
    };

    RectangleTool.prototype.positionControls = function() {
      return this.controls.moveTo(this.mark.left + this.mark.width, this.mark.top, true);
    };

    return RectangleTool;

  })(Tool);

  if (typeof window !== "undefined" && window !== null) {
    window.MarkingSurface.RectangleTool = RectangleTool;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = RectangleTool;
  }

}).call(this);
