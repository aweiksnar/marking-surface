// Generated by CoffeeScript 1.6.3
(function() {
  var MagnifierPointTool, Tool, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tool = ((typeof window !== "undefined" && window !== null ? window.MarkingSurface : void 0) || require('marking-surface')).Tool;

  MagnifierPointTool = (function(_super) {
    __extends(MagnifierPointTool, _super);

    function MagnifierPointTool() {
      _ref = MagnifierPointTool.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MagnifierPointTool.prototype.href = '';

    MagnifierPointTool.prototype.radius = 40;

    MagnifierPointTool.prototype.zoom = 1.5;

    MagnifierPointTool.prototype.stroke = 'white';

    MagnifierPointTool.prototype.strokeWidth = 2;

    MagnifierPointTool.prototype.cursors = {
      disc: '*grab'
    };

    MagnifierPointTool.prototype.initialize = function() {
      this.href || (this.href = this.surface.el.querySelector('image').href.baseVal);
      this.clip = this.addShape('clipPath', {
        id: "_" + (Math.random().toString().slice(2))
      });
      this.clipCircle = this.clip.addShape('circle');
      this.image = this.addShape('image', {
        clipPath: "url(#" + (this.clip.attr('id')) + ")"
      });
      this.disc = this.addShape('circle.disc');
      this.root.filter('shadow');
      return this.redraw();
    };

    MagnifierPointTool.prototype.onInitialClick = function() {
      return this.onInitialDrag.apply(this, arguments);
    };

    MagnifierPointTool.prototype.onInitialDrag = function() {
      return this['on *drag disc'].apply(this, arguments);
    };

    MagnifierPointTool.prototype['on *drag disc'] = function(e) {
      return this.mark.set(this.pointerOffset(e));
    };

    MagnifierPointTool.prototype.onInitialClick = MagnifierPointTool.prototype.onInitialDrag;

    MagnifierPointTool.prototype.redraw = function() {
      var img,
        _this = this;
      this.clipCircle.attr('r', this.radius);
      img = new Image;
      img.onload = function() {
        var height, width;
        width = img.width, height = img.height;
        return _this.image.attr({
          'xlink:href': _this.href,
          width: width * _this.zoom,
          height: height * _this.zoom
        });
      };
      img.src = this.href;
      this.disc.attr({
        r: this.radius,
        stroke: this.stroke,
        strokeWidth: this.strokeWidth
      });
      return this.render();
    };

    MagnifierPointTool.prototype.render = function() {
      var height, pctX, pctY, width;
      this.group.attr('transform', "translate(" + this.mark.x + ", " + this.mark.y + ")");
      pctX = this.mark.x / this.surface.el.clientWidth;
      pctY = this.mark.y / this.surface.el.clientHeight;
      width = this.image.attr('width');
      height = this.image.attr('height');
      this.clipCircle.attr('transform', "translate(" + (width * pctX) + ", " + (height * pctY) + ")");
      this.image.attr('transform', "translate(" + (width * -pctX) + ", " + (height * -pctY) + ")");
      return this.controls.moveTo(this.mark.x, this.mark.y);
    };

    return MagnifierPointTool;

  })(Tool);

  if (typeof window !== "undefined" && window !== null) {
    window.MarkingSurface.MagnifierPointTool = MagnifierPointTool;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = MagnifierPointTool;
  }

}).call(this);
