// Generated by CoffeeScript 1.6.3
(function() {
  var $, AxesTool, Raphael, Tool, dotRadius, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tool = window.MarkingSurface.Tool;

  $ = window.jQuery;

  Raphael = window.Raphael;

  dotRadius = 'Touch' in window ? 10 : 5;

  AxesTool = (function(_super) {
    __extends(AxesTool, _super);

    function AxesTool() {
      _ref = AxesTool.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AxesTool.prototype.cross = null;

    AxesTool.prototype.dots = null;

    AxesTool.prototype.markDefaults = {
      p0: [-20, -20],
      p1: [-20, -20],
      p2: [-20, -20],
      p3: [-20, -20]
    };

    AxesTool.prototype.cursors = {
      'dots': 'move'
    };

    AxesTool.prototype.initialize = function() {
      var dotShapes, i;
      this.cross = this.addShape('path', 'M 0 0', {
        stroke: 'red',
        'stroke-width': 3
      });
      dotShapes = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < 4; i = ++_i) {
          _results.push(this.addShape('circle', 0, 0, dotRadius, {
            fill: 'black',
            stroke: 'red',
            'stroke-width': 3
          }));
        }
        return _results;
      }).call(this);
      return this.dots = this.surface.paper.set(dotShapes);
    };

    AxesTool.prototype.onFirstClick = function(e) {
      var point, points, x, y, _i, _len, _ref1, _results;
      _ref1 = this.mouseOffset(e), x = _ref1.x, y = _ref1.y;
      points = this.clicks === 0 ? ['p0', 'p1', 'p2', 'p3'] : ['p2', 'p3'];
      _results = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        _results.push(this.mark.set(point, [x, y]));
      }
      return _results;
    };

    AxesTool.prototype.onFirstDrag = function(e) {
      var point, points, x, y, _i, _len, _ref1, _results;
      _ref1 = this.mouseOffset(e), x = _ref1.x, y = _ref1.y;
      points = this.clicks === 0 ? ['p1', 'p3'] : ['p3'];
      _results = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        _results.push(this.mark.set(point, [x, y]));
      }
      return _results;
    };

    AxesTool.prototype.isComplete = function() {
      return this.clicks === 2;
    };

    AxesTool.prototype['on drag dots'] = function(e, shape) {
      var index, x, y, _ref1;
      index = $.inArray(shape, this.dots);
      _ref1 = this.mouseOffset(e), x = _ref1.x, y = _ref1.y;
      return this.mark.set("p" + index, [x, y]);
    };

    AxesTool.prototype.render = function() {
      var i, intersection, majorPath, minorPath, point, _i, _len, _ref1;
      _ref1 = ['p0', 'p1', 'p2', 'p3'];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        point = _ref1[i];
        this.dots[i].attr({
          cx: this.mark[point][0],
          cy: this.mark[point][1]
        });
      }
      majorPath = "M " + this.mark.p0[0] + " " + this.mark.p0[1] + ", L " + this.mark.p1[0] + " " + this.mark.p1[1];
      minorPath = "M " + this.mark.p2[0] + " " + this.mark.p2[1] + ", L " + this.mark.p3[0] + " " + this.mark.p3[1];
      this.cross.attr({
        path: "" + majorPath + ", " + minorPath
      });
      intersection = Raphael.pathIntersection(majorPath, minorPath)[0];
      this.cross.attr({
        'stroke-dasharray': intersection != null ? '' : '.'
      });
      if (intersection == null) {
        intersection = {
          x: (this.mark.p0[0] + this.mark.p1[0]) / 2,
          y: (this.mark.p0[1] + this.mark.p1[1]) / 2
        };
      }
      return this.controls.moveTo(intersection.x, intersection.y);
    };

    return AxesTool;

  })(Tool);

  window.MarkingSurface.AxesTool = AxesTool;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = AxesTool;
  }

}).call(this);
